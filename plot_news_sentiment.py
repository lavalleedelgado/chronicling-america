'''
Plot News Sentiment from Chronicling America
Patrick Lavallee Delgado
University of Chicago, Harris MSCAPP '20
March 23, 2019

'''

import sys
from bokeh.plotting import figure, output_file, show
from bokeh.models import LinearAxis, Range1d
from bokeh.resources import CDN
from bokeh.embed import file_html
import math
import pandas as pd


def plot_news_sentiment(log_path, base_path, base_name):

    '''
    Plot news sentiment analysis of Chronicling America dataset and contrast
    with another dataset. This creates two plots: one of the volume of news
    mentions in the data against a base comparison, and another of the share of
    negative polarity in news mentions against the base comparison.

    log_path (str): path to log CSV file generated by chronicling_america.py.
    base_path (str): path to base comparison CSV data.
    base_name (str): name of base comparison data to label plots.

    NB: base comparison data must have two columns: "year" and "count".

    Create two Bokeh plots as HTML files.

    '''

    # Load and prepare data for Bokeh.
    log = pd.read_csv(log_path)
    news_sentiment = prepare_news_sentiment(log)
    news_volume = prepare_news_volume(log, news_sentiment)
    news_y_min, news_y_max = calculate_axis_range(news_volume["w_volume"])
    negative_polarity = prepare_negative_polarity(news_sentiment)
    base_comparison = pd.read_csv(base_path)
    base_y_min, base_y_max = calculate_axis_range(base_comparison["count"])
    
    # Plot news mentions with base comparison.
    figure_a = figure(
        toolbar_location=None,
        tools="",
        plot_height=600,
        plot_width=1000,
        x_axis_label="Year",
        y_axis_label="News Mentions",
        y_range=(Range1d(start=news_y_min, end=news_y_max)))
    figure_a.title.text = "News Mentions & " + base_name
    figure_a.title.text_font_size = "40px"
    figure_a.title.align = "center"
    figure_a.line(
        legend="News Mentions of " + base_name,
        x=news_volume["year"],
        y=news_volume["w_volume"],
        line_width=2,
        color="red",
        alpha=1)
    figure_a.circle(
        x=news_volume["year"],
        y=news_volume["w_volume"],
        size=6,
        line_color="red",
        fill_color="white",
        alpha=1)
    figure_a.extra_y_ranges = {
        "base_comparison": Range1d(start=base_y_min, end=base_y_max)}
    figure_a.line(
        legend=base_name,
        x=base_comparison["year"],
        y=base_comparison["count"],
        y_range_name="base_comparison",
        line_width=2,
        color="navy",
        alpha=1)
    figure_a.circle(
        x=base_comparison["year"],
        y=base_comparison["count"],
        y_range_name="base_comparison",
        size=6,
        line_color="navy",
        fill_color="white",
        alpha=1)
    figure_a.add_layout(LinearAxis(y_range_name="base_comparison", \
        axis_label=base_name), "right")
    with open("news_mentions.html", "w") as figure_a_html:
        figure_a_html.write(file_html(figure_a, CDN, "News Mentions"))
    
    # Plot negative polarity as a share of news mentions with base comparison.
    figure_b = figure(
        toolbar_location=None,
        tools="",
        plot_height=600,
        plot_width=1000,
        x_axis_label="Year",
        y_axis_label="Share of News Mentions with Negative Polarity",
        y_range=(Range1d(start=0, end=1)))
    figure_b.title.text = "News Polarity & " + base_name
    figure_b.title.text_font_size = "40px"
    figure_b.title.align = "center"
    figure_b.line(
        legend="Share of Negative Polarity in News Mentions of " + base_name,
        x=negative_polarity["year"],
        y=negative_polarity["polarity"],
        line_width=2,
        color="black",
        alpha=1)
    figure_b.circle(
        x=negative_polarity["year"],
        y=negative_polarity["polarity"],
        size=6,
        line_color="black",
        fill_color="white",
        alpha=1)
    figure_b.extra_y_ranges = {
        "base_comparison": Range1d(start=base_y_min, end=base_y_max)}
    figure_b.line(
        legend=base_name,
        x=base_comparison["year"],
        y=base_comparison["count"],
        y_range_name="base_comparison",
        line_width=2,
        color="red",
        alpha=1)
    figure_b.circle(
        x=base_comparison["year"],
        y=base_comparison["count"],
        y_range_name="base_comparison",
        size=6,
        line_color="red",
        fill_color="white",
        alpha=1)
    figure_b.add_layout(LinearAxis(y_range_name="base_comparison", \
        axis_label=base_name), "right")
    with open("negative_polarity.html", "w") as figure_b_html:
        figure_b_html.write(file_html(figure_b, CDN, "Negative Polarity"))


def prepare_news_sentiment(log):

    '''
    Prepare news sentiment data per specifications in the Chronicling America
    log file as the concatenation the datasets in its catalogue.

    log (DataFrame): Chronicling America log.

    Return news sentiment data (DataFrame).

    '''

    sentiment = merge_datasets(log["path"])
    sentiment["date"] = pd.to_datetime(sentiment["date"])
    sentiment["year"] = sentiment["date"].dt.year
    return sentiment[["year", "key_sentences", "polarity", "subjectivity"]]


def merge_datasets(paths):

    '''
    Locate datasets from paths and merge into a new dataframe.

    paths (Series): text representations of CSV paths.

    Return merged data (DataFrame).

    '''

    paths = list(paths)
    data = pd.read_csv(paths.pop())
    for path in paths:
        data = data.append(pd.read_csv(path), ignore_index=True)
    return data


def prepare_news_volume(log, sentiment):

    '''
    Prepare news volume data per specifications in the Chronicling America log
    file as the weighted volume of news mentions controlling for missingness of
    news articles in excess of the maximum number of results allowed during
    collection.

    log (DataFrame): Chronicling America log.
    sentiment (DataFrame): news sentiment data from prepare_news_sentiment().

    Return news volume data (DataFrame).

    '''

    # Calculate period weights to account for missingness of news articles.
    log["period_weight"] = log.apply(
        lambda df: df["n_available"] / df["n_collected"], axis=1)
    log = log.set_index("year_min")
    period_weights = log.to_dict("index")

    # Calculate annual weights from news sentiment volume and period weights.
    volume = sentiment.groupby("year").size().reset_index()
    volume.columns = ["year", "volume"]
    volume["weight"] = volume["year"].apply(lookup_weight, \
        args=(period_weights,))

    # Calculate weighted news sentiment volume.
    volume["w_volume"] = volume["volume"] * volume["weight"]
    return volume[["year", "w_volume"]]


def lookup_weight(year, period_weights):

    '''
    Lookup the weight of a particular year from the weight correspondent to a
    range of years.

    year (int or str): year for which to lookup a weight.
    period_weights (dict): mapping of years to weights in log dataframe.

    Return weight (int).

    '''
    
    year = int(year)
    weight = None
    for year_min in period_weights.keys():
        if year >= int(year_min) and \
            year <= int(period_weights[year_min]["year_max"]):
            weight = period_weights[year_min]["period_weight"]
    if not weight:
        return 1
    return weight


def calculate_axis_range(series):

    '''
    Calculate a suitable minimum and maximum values with which to plot the
    range of a particular series.

    series (Series): data for which to calculate axis range.

    Return axis range (tuple).

    '''

    series_incr = 10 ** int(math.log10(abs(series.max())))
    series_range = [series.min(), series.max()]
    series_range = pd.Series(series_range) // series_incr * series_incr
    return min(0, series_range[0]), series_range[1] + series_incr


def prepare_negative_polarity(sentiment):

    '''
    Prepare negative polarity data as the share of news mentions with negative
    polarity from news sentiment data.

    sentiment (DataFrame): news sentiment data from prepare_news_sentiment().

    Return negative polarity data (DataFrame).

    '''

    # Calculate share of articles with negative polarity each year.
    neg = sentiment[sentiment["polarity"] < 0.0]
    neg = neg.groupby("year").size().reset_index()
    neg.columns = ["year", "polarity"]
    pos = sentiment[sentiment["polarity"] > 0.0]
    pos = pos.groupby("year").size().reset_index()
    pos.columns = ["year", "polarity"]
    neg["polarity"] = neg["polarity"] / (pos["polarity"] + neg["polarity"])
    return neg[["year", "polarity"]]


def run():

    '''
    Collect arguments from standard input with which to create and export plots
    of news sentiment analysis of Chronicling America dataset contrasted with
    another dataset.

    '''

    arguments = sys.argv[1:]
    if len(arguments) < 3:
        print("Expected at least three arguments: path to Chronicling America "
              "log CSV, path to annual base comparison CSV, and base name.")
        sys.exit()
    log_path = arguments.pop(0)
    base_path = arguments.pop(0)
    base_name = " ".join(arguments)
    plot_news_sentiment(log_path, base_path, base_name)
    print("Finished!")
    sys.exit()


if __name__ == "__main__":
    run()

